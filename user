#If you've been following along, you're going to utilize the User class we've been discussing for this assignment.

#For this assignment, we'll add some functionality to the User class:

#make_withdrawal(self, amount) - have this method decrease the user's balance by the amount specified
#display_user_balance(self) - have this method print the user's name and account balance to the terminal
#eg. "User: Guido van Rossum, Balance: $150
#BONUS: transfer_money(self, other_user, amount) - have this method decrease the user's balance by the amount and add that amount to other other_user's balance

class User:
    def __init__(self, username, email_address):# now our method has 2 parameters!
        self.name = username			# and we use the values passed in to set the name attribute
        self.email = email_address		# and the email attribute
        self.account_balance = 0		# the account balance is set to $0, so no need for a third parameter
        # adding the deposit method
    def make_deposit(self, add_amount):	# takes an argument that is the amount of the deposit
        self.account_balance += add_amount	# the specific user's account increases by the amount of the value received
    def make_withdraw(self, subtract_amount):	# takes an argument that is the amount of the deposit
        self.account_balance -= subtract_amount	# the specific user's account increases by the amount of the value received
    def display_user_balance(self):
        print(f"User: {self.name}, Balance: ${self.account_balance}.")
    def transfer_money(self, other_user, amount):
        self.account_balance -= amount
        other_user.account_balance += amount

guido = User("Guido van Rossum", "guido@python.com")
monty = User("Monty Python", "monty@python.com")
guido.make_deposit(100)
guido.make_deposit(200)
monty.make_deposit(50)

guido.display_user_balance()
monty.display_user_balance()

guido.transfer_money(monty,50)
guido.display_user_balance()
monty.display_user_balance()